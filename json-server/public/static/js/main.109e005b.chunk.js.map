{"version":3,"sources":["components/LoadingComponent.js","shared/baseURL.js","components/Home.js","components/Header.js","components/Footer.js","components/Menu.js","components/AboutComponent.js","components/ContactCompRedux.js","components/DishDetail.js","redux/ActionTypes.js","redux/ActionCreators.js","components/Main.js","redux/dishes.js","redux/comments.js","redux/promotions.js","redux/leaders.js","redux/forms.js","App.js","redux/configureStore.js","index.js"],"names":["Loading","className","baseURL","RenderCard","item","isLoading","errMess","in","transformProps","exitTransform","src","image","alt","name","designation","description","Home","props","dish","dishesLoading","dishesErrMess","promotion","promotionsLoading","promotionsErrMess","leader","leadersLoading","leadersErrMess","Header","toggleNav","bind","toggleModal","handleLogin","state","isNavOpen","isModalOpen","this","setState","event","alert","username","value","password","remember","checked","Fragment","dark","expand","href","height","width","onClick","isOpen","navbar","to","outline","toggle","onSubmit","htmlFor","type","id","innerRef","input","check","Component","Footer","Menu","RenderDish","theDish","menu","dishes","map","active","About","LeadersComponent","leadersInfo","list","leaders","RenderLeader","tag","left","middle","object","body","heading","title","required","val","length","maxLength","len","minLength","isNumber","isNaN","Number","validEmail","test","ContactRedux","handleSubmit","values","postFeedback","firstname","lastname","telnum","email","agree","contactType","message","resetFeedbackForm","role","model","md","text","placeholder","validators","show","messages","size","offset","checkbox","select","textarea","rows","color","CommentFormComponent","postComment","dishId","rating","author","comment","DishDetail","RenderAllComments","comments","theComments","theComment","date","Date","toLocaleDateString","year","month","day","RenderOneComment","ADD_COMMENT","DISHES_LOADING","DISHES_FAILED","ADD_DISHES","PROMOS_LOADING","PROMOS_FAILED","ADD_PROMOS","COMMENTS_FAILED","ADD_COMMENTS","LEADERS_LOADING","LEADERS_FAILED","ADD_LEADERS","dispatch","newComment","toISOString","fetch","method","JSON","stringify","headers","credentials","then","response","ok","error","Error","status","statusText","json","ActionTypes","payload","addComment","catch","console","log","dishesFailed","errmess","addDishes","addComments","commentsFailed","promosLoading","promosFailed","addPromos","promos","leadersFailed","addLeaders","Main","fetchDishes","fetchComments","fetchPromos","fetchLeaders","getFeatured","filter","element","featured","classNames","timeout","path","component","promotions","exact","match","parseInt","params","commentsErrMess","location","key","withRouter","connect","actions","reset","newFeedback","feedback","Dishes","action","Comments","concat","Promotions","Leaders","InitialFeedback","store","createStore","combineReducers","createForms","applyMiddleware","thunk","logger","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.109e005b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Loading = () => {\r\n    return (\r\n        <div className=\"col-12\">\r\n            <span className=\"fa fa-spinner fa-pulse fa-3x fa-fw text-primary\"></span>\r\n            <p>Loading . . .</p>\r\n        </div>\r\n    );\r\n}","export const baseURL = 'http://localhost:3001/';","import React from 'react';\r\nimport { Card, CardImg, CardText, CardBody, CardTitle, CardSubtitle } from 'reactstrap';\r\nimport { Loading } from './LoadingComponent';\r\nimport { baseURL } from '../shared/baseURL';\r\nimport { FadeTransform } from 'react-animation-components';\r\n\r\nfunction RenderCard({item, isLoading, errMess}) {\r\n    // {item.designation ? <CardSubtitle>{item.designation}</CardSubtitle> : null } ---> Only render CardSubtitle if item.designation exists\r\n    if(isLoading) {\r\n        return (\r\n            <Loading />\r\n        );\r\n    }\r\n    else if(errMess) {\r\n        return(\r\n            <h4>{errMess}</h4>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <FadeTransform in transformProps = {{exitTransform: 'scale(0.5) translateY(-50%)'}}>\r\n                <Card>\r\n                    <CardImg src={baseURL + item.image} alt={item.name}/>\r\n                    <CardBody>\r\n                        <CardTitle>{item.name}</CardTitle>\r\n                        {item.designation ? <CardSubtitle>{item.designation}</CardSubtitle> : null }\r\n                        <CardText>{item.description}</CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            </FadeTransform>\r\n        );\r\n    }\r\n}\r\n\r\nfunction Home(props) {\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"row align-items-start\">\r\n                <div className=\"col-12 col-md m-1\">\r\n                    <RenderCard item={props.dish} \r\n                        isLoading={props.dishesLoading} \r\n                        errMess={props.dishesErrMess} />\r\n                </div>\r\n                <div className=\"col-12 col-md m-1\">\r\n                    <RenderCard item={props.promotion}\r\n                        isLoading={props.promotionsLoading} \r\n                        errMess={props.promotionsErrMess} />\r\n                </div>\r\n                <div className=\"col-12 col-md m-1\">\r\n                    <RenderCard item={props.leader} \r\n                        isLoading={props.leadersLoading}\r\n                        errMess={props.leadersErrMess} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","import React, {Component} from 'react';\r\nimport { Nav, Navbar, NavbarBrand, NavbarToggler, Collapse, NavItem, Jumbotron } from 'reactstrap';\r\nimport { Modal, ModalHeader, ModalBody, Button } from 'reactstrap';\r\nimport { Form, FormGroup, Label, Input } from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nclass Header extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.toggleNav = this.toggleNav.bind(this); // This is the reason why we can write this: onClick={this.toggleNav}\r\n        // Other way is to do onClick={()=>this.toggleNav()}\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n        this.state = {\r\n          isNavOpen: false,\r\n          isModalOpen: false\r\n        };\r\n      }\r\n\r\n    toggleNav() {\r\n        this.setState({\r\n            isNavOpen: !this.state.isNavOpen\r\n        });\r\n    }\r\n\r\n    toggleModal() {\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen\r\n        });\r\n    }\r\n\r\n    handleLogin(event) {\r\n        // innerRef={(input) => this.password = input} ---> This way you expose the values of the form to the class\r\n        this.toggleModal();\r\n        alert(\r\n            \"Username: \" + this.username.value + \r\n            \" Password: \" + this.password.value + \r\n            \" Remember: \" + this.remember.checked\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <React.Fragment>\r\n                <Navbar dark expand=\"md\">\r\n                    <div className=\"container\">\r\n                        <NavbarBrand className=\"mr-auto\" href=\"/\"><img src='assets/images/logo.png' height=\"30\" width=\"41\" alt='Ristorante Con Fusion' /></NavbarBrand>\r\n                        <NavbarToggler onClick={this.toggleNav} />\r\n                        <Collapse isOpen={this.state.isNavOpen} navbar>\r\n                            <Nav navbar>\r\n                                <NavItem>\r\n                                    <NavLink className=\"nav-link\"  to='/home'><span className=\"fa fa-home fa-lg\"></span> Home</NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink className=\"nav-link\" to='/aboutus'><span className=\"fa fa-info fa-lg\"></span> About Us</NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink className=\"nav-link\"  to='/menu'><span className=\"fa fa-list fa-lg\"></span> Menu</NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink className=\"nav-link\" to='/contactus'><span className=\"fa fa-address-card fa-lg\"></span> Contact Us</NavLink>\r\n                                </NavItem>\r\n                            </Nav>\r\n                            <Nav className=\"ml-auto\" navbar>\r\n                                <NavItem>\r\n                                    <Button outline onClick={this.toggleModal}>\r\n                                        <span className=\"fa fa-sign-in fa-lg\"></span>Login\r\n                                    </Button>\r\n                                </NavItem>\r\n                            </Nav>\r\n                        </Collapse>\r\n                    </div>\r\n                </Navbar>\r\n                <Jumbotron>\r\n                    <div className=\"container\">\r\n                        <div className=\"row row-header\">\r\n                            <div className=\"col-12 col-sm-6\">\r\n                                <h1>Ristorante con Fusion</h1>\r\n                                <p>We take inspiration from the World's best cuisines, and create a unique fusion experience. Our lipsmacking creations will tickle your culinary senses!</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Jumbotron>\r\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n                    <ModalHeader toggle={this.toggleModal}>Login</ModalHeader>\r\n                    <ModalBody>\r\n                        <Form onSubmit={this.handleLogin}>\r\n                            <FormGroup>\r\n                                <Label htmlFor=\"username\">Username</Label>\r\n                                <Input type=\"text\" id=\"username\" name=\"username\"\r\n                                    innerRef={(input) => this.username = input} />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label htmlFor=\"password\">Password</Label>\r\n                                <Input type=\"password\" id=\"password\" name=\"password\"\r\n                                    innerRef={(input) => this.password = input} />\r\n                            </FormGroup>\r\n                            <FormGroup check>\r\n                                <Label check>\r\n                                    <Input type=\"checkbox\" name=\"remember\"\r\n                                        innerRef={(input) => this.remember = input} />\r\n                                    Remember me\r\n                                </Label>\r\n                            </FormGroup>\r\n                            <Button type=\"submit\" value=\"submit\" className=\"bg-primary bottom-button\">Login</Button>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Footer(props) {\r\n    return (\r\n        <div className=\"footer\">\r\n            <div className=\"container\">\r\n                <div className=\"row justify-content-center\">             \r\n                    <div className=\"col-4 offset-1 col-sm-2\">\r\n                        <h5>Links</h5>\r\n                        <ul className=\"list-unstyled\">\r\n                            <li><Link to=\"/home\">Home</Link></li>\r\n                            <li><Link to=\"/aboutus\">About Us</Link></li>\r\n                            <li><Link to=\"/menu\">Menu</Link></li>\r\n                            <li><Link to=\"/contactus\">Contact Us</Link></li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"col-7 col-sm-5\">\r\n                        <h5>Our Address</h5>\r\n                        <address>\r\n                        121, Clear Water Bay Road<br />\r\n                        Clear Water Bay, Kowloon<br />\r\n                        HONG KONG<br />\r\n                        <i className=\"fa fa-phone fa-lg\"></i>: +852 1234 5678<br />\r\n                        <i className=\"fa fa-fax fa-lg\"></i>: +852 8765 4321<br />\r\n                        <i className=\"fa fa-envelope fa-lg\"></i>: <a href=\"mailto:confusion@food.net\">\r\n                            confusion@food.net</a>\r\n                        </address>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-4 align-self-center\">\r\n                        <div className=\"text-center\">\r\n                            <a className=\"btn btn-social-icon btn-google\" href=\"http://google.com/+\"><i className=\"fa fa-google-plus\"></i></a>\r\n                            <a className=\"btn btn-social-icon btn-facebook\" href=\"http://www.facebook.com/profile.php?id=\"><i className=\"fa fa-facebook\"></i></a>\r\n                            <a className=\"btn btn-social-icon btn-linkedin\" href=\"http://www.linkedin.com/in/\"><i className=\"fa fa-linkedin\"></i></a>\r\n                            <a className=\"btn btn-social-icon btn-twitter\" href=\"http://twitter.com/\"><i className=\"fa fa-twitter\"></i></a>\r\n                            <a className=\"btn btn-social-icon btn-google\" href=\"http://youtube.com/\"><i className=\"fa fa-youtube\"></i></a>\r\n                            <a className=\"btn btn-social-icon\" href=\"mailto:\"><i className=\"fa fa-envelope-o\"></i></a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row justify-content-center\">             \r\n                    <div className=\"col-auto\">\r\n                        <p>© Copyright 2018 Ristorante Con Fusion</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport { Card, CardImg, CardImgOverlay, CardTitle, Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Loading } from './LoadingComponent';\r\nimport { baseURL } from '../shared/baseURL';\r\n\r\nfunction Menu(props) {\r\n    function RenderDish({theDish}) {\r\n        // Use backquotes `` for the link \"to\" parameter\r\n        // <CardImg width=\"100%\" src={baseURL + theDish.image} alt={theDish.name} /> --> The image will be fetched directly from the server\r\n        // We could remove the images from \"public\" folder, except the logo...\r\n        return (\r\n            <Card>\r\n                <Link to={`/menu/${theDish.id}`} >\r\n                    <CardImg width=\"100%\" src={baseURL + theDish.image} alt={theDish.name} />\r\n                    <CardImgOverlay>\r\n                        <CardTitle>{theDish.name}</CardTitle>\r\n                    </CardImgOverlay>\r\n                </Link>\r\n            </Card>\r\n        );\r\n    }\r\n\r\n    const menu = props.dishes.dishes.map((dish) => {\r\n        return (\r\n            <div key={dish.id} className=\"col-12 col-md-5 m-1\">\r\n                <RenderDish theDish={dish} />\r\n            </div>\r\n        )\r\n    });\r\n\r\n    if(props.dishes.isLoading) {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Loading />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    else if(props.dishes.errMess) {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <h4>{props.dishes.errMess}</h4>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem><Link to='/home'>Home</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>Menu</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>Menu</h3>\r\n                        <hr />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    {menu}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Menu;","import React from 'react';\r\nimport { Breadcrumb, BreadcrumbItem, Card, CardBody, CardHeader, Media } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Loading } from './LoadingComponent';\r\nimport { baseURL } from '../shared/baseURL';\r\nimport { Fade, Stagger } from 'react-animation-components';\r\n\r\nfunction About(props) {\r\n\r\n    function LeadersComponent({leadersInfo}) {\r\n        if(leadersInfo.isLoading) {\r\n            return (\r\n                <Loading />\r\n            );\r\n        }\r\n        else if(leadersInfo.errMess) {\r\n            return(\r\n                <h4>{leadersInfo.errMess}</h4>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <Media list>\r\n                    <Stagger in>\r\n                        {leadersInfo.leaders.map((leader) => {\r\n                            return(\r\n                                <Fade in>\r\n                                    <RenderLeader leader={leader}></RenderLeader>\r\n                                </Fade>\r\n                            );\r\n                        })}\r\n                    </Stagger>\r\n                </Media>\r\n            );\r\n        }\r\n    }\r\n    function RenderLeader({leader}) {\r\n        return (\r\n            <div key={leader.id} className=\"col-12 mt-5\">\r\n                <Media tag=\"li\">\r\n                    <Media left middle>\r\n                        <Media object src={baseURL + leader.image} alt={leader.name} />\r\n                    </Media>\r\n                    <Media body className=\"ml-5\">\r\n                        <Media heading>{leader.name}</Media>\r\n                        <h6>{leader.designation}</h6>\r\n                        <p>{leader.description}</p>\r\n                    </Media>\r\n                </Media>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <Breadcrumb>\r\n                    <BreadcrumbItem><Link to=\"/home\">Home</Link></BreadcrumbItem>\r\n                    <BreadcrumbItem active>About Us</BreadcrumbItem>\r\n                </Breadcrumb>\r\n                <div className=\"col-12\">\r\n                    <h3>About Us</h3>\r\n                    <hr />\r\n                </div>                \r\n            </div>\r\n            <div className=\"row row-content\">\r\n                <div className=\"col-12 col-md-6\">\r\n                    <h2>Our History</h2>\r\n                    <p>Started in 2010, Ristorante con Fusion quickly established itself as a culinary icon par excellence in Hong Kong. With its unique brand of world fusion cuisine that can be found nowhere else, it enjoys patronage from the A-list clientele in Hong Kong.  Featuring four of the best three-star Michelin chefs in the world, you never know what will arrive on your plate the next time you visit us.</p>\r\n                    <p>The restaurant traces its humble beginnings to <em>The Frying Pan</em>, a successful chain started by our CEO, Mr. Peter Pan, that featured for the first time the world's best cuisines in a pan.</p>\r\n                </div>\r\n                <div className=\"col-12 col-md-5\">\r\n                    <Card>\r\n                        <CardHeader className=\"bg-primary text-white\">Facts At a Glance</CardHeader>\r\n                        <CardBody>\r\n                            <dl className=\"row p-1\">\r\n                                <dt className=\"col-6\">Started</dt>\r\n                                <dd className=\"col-6\">3 Feb. 2013</dd>\r\n                                <dt className=\"col-6\">Major Stake Holder</dt>\r\n                                <dd className=\"col-6\">HK Fine Foods Inc.</dd>\r\n                                <dt className=\"col-6\">Last Year's Turnover</dt>\r\n                                <dd className=\"col-6\">$1,250,375</dd>\r\n                                <dt className=\"col-6\">Employees</dt>\r\n                                <dd className=\"col-6\">40</dd>\r\n                            </dl>\r\n                        </CardBody>\r\n                    </Card>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                    <Card>\r\n                        <CardBody className=\"bg-faded\">\r\n                            <blockquote className=\"blockquote\">\r\n                                <p className=\"mb-0\">You better cut the pizza in four pieces because\r\n                                    I'm not hungry enough to eat six.</p>\r\n                                <footer className=\"blockquote-footer\">Yogi Berra,\r\n                                <cite title=\"Source Title\">The Wit and Wisdom of Yogi Berra,\r\n                                    P. Pepe, Diversion Books, 2014</cite>\r\n                                </footer>\r\n                            </blockquote>\r\n                        </CardBody>\r\n                    </Card>\r\n                </div>\r\n            </div>\r\n            <div className=\"row row-content\">\r\n                <div className=\"col-12\">\r\n                    <h2>Corporate Leadership</h2>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                    <LeadersComponent leadersInfo={props.leadersInfo} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default About;","/* eslint-disable */\r\n\r\nimport React, { Component } from 'react';\r\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Label, Col, Row } from 'reactstrap';\r\nimport { Control, Form, Errors, actions } from 'react-redux-form';\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\nclass ContactRedux extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(values) {\r\n        this.props.postFeedback(\r\n            values.firstname, \r\n            values.lastname, \r\n            values.telnum, \r\n            values.email, \r\n            values.agree, \r\n            values.contactType, \r\n            values.message\r\n        )\r\n        this.props.resetFeedbackForm();\r\n    }\r\n\r\n    // Here where it says Form model=\"feedback\" this is because in Main Component we have:\r\n    // resetFeedbackForm: () => { dispatch(actions.reset('****** feedback ******')) }\r\n    render() {\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem><Link to='/home'>Home</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>Contact Us</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>Contact Us</h3>\r\n                        <hr />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                    <h3>Location Information</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n                            <h5>Our Address</h5>\r\n                            <address>\r\n                            121, Clear Water Bay Road<br />\r\n                            Clear Water Bay, Kowloon<br />\r\n                            HONG KONG<br />\r\n                            <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n                            <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n                            <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n                            </address>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n                        <h5>Map of our Location</h5>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n                        <div className=\"btn-group\" role=\"group\">\r\n                            <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\r\n                            <a role=\"button\" className=\"btn btn-info\" href=\"/contactus\"><i className=\"fa fa-skype\"></i> Skype</a>\r\n                            <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Send us Your Feedback</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-md-9\">\r\n                        <Form model=\"feedback\" onSubmit={(values) => this.handleSubmit(values)}>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\" \r\n                                        placeholder=\"First Name\" \r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required,\r\n                                            minLength: minLength(3),\r\n                                            maxLength: maxLength(15)\r\n                                        }}/>\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".firstname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }} />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\" \r\n                                        placeholder=\"Last Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required,\r\n                                            minLength: minLength(3),\r\n                                            maxLength: maxLength(15)\r\n                                        }} />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".lastname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }} />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"telnum\" md={2}>Tel. Number</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".telnum\" id=\"telnum\" name=\"telnum\" \r\n                                        placeholder=\"Telephone Number\" \r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required,\r\n                                            minLength: minLength(3),\r\n                                            maxLength: maxLength(15),\r\n                                            isNumber\r\n                                        }} />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".telnum\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 numbers',\r\n                                            maxLength: 'Must be 15 numbers or less',\r\n                                            isNumber: 'Must be a number'\r\n                                        }} />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".email\" type=\"email\" id=\"email\" name=\"email\" \r\n                                        placeholder=\"Email\" \r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required,\r\n                                            validEmail\r\n                                        }} />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".email\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            validEmail: 'Invalid Email Address'\r\n                                        }} />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{size: 6, offset: 2}}>\r\n                                    <div className=\"form-check\">\r\n                                        <Label check>\r\n                                            <Control.checkbox model=\".agree\" name=\"agree\" className=\"form-check\" />\r\n                                            {' '}<strong>May we contact you?</strong>\r\n                                        </Label>\r\n                                    </div>\r\n                                </Col>\r\n                                <Col md={{size: 3, offset: 1}}>\r\n                                    <Control.select model=\".contactType\" name=\"contactType\" className=\"form-control\">\r\n                                        <option>Tel.</option>\r\n                                        <option>Email</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"feedback\" md={2}>Your Feedback</Label>\r\n                                <Col md={10}>\r\n                                    <Control.textarea model=\".message\" id=\"message\" name=\"message\" rows=\"12\" className=\"form-control\"/>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{size:10, offset:2}}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                        Send Feedback\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContactRedux;","/* eslint-disable */\r\n\r\nimport { Component } from 'react';\r\nimport { Card, CardImg, CardText, CardBody, CardTitle, ListGroup, ListGroupItem , BreadcrumbItem, Breadcrumb} from 'reactstrap';\r\nimport { Button, Label, Modal, ModalBody, ModalHeader, Row } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport React from 'react';\r\nimport { Control, LocalForm, Errors } from 'react-redux-form';\r\nimport { Loading } from './LoadingComponent';\r\nimport { baseURL } from '../shared/baseURL';\r\nimport { FadeTransform, Fade, Stagger } from 'react-animation-components';\r\n\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\n\r\nclass CommentFormComponent extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            isModalOpen: false\r\n          };\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n    }\r\n    \r\n    toggleModal() {\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen\r\n        });\r\n    }\r\n\r\n    handleSubmit(values) {\r\n        this.toggleModal();\r\n        this.props.postComment(this.props.dishId, values.rating, values.author, values.comment);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Button outline onClick={this.toggleModal}>\r\n                    <span className=\"fa fa-pencil fa-lg\"></span> Submit Comment\r\n                </Button>\r\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n                    <ModalHeader toggle={this.toggleModal}>Submit Comment</ModalHeader>\r\n                    <ModalBody>\r\n                        <LocalForm onSubmit={(values) => this.handleSubmit(values)} className=\"col-12\">\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"rating\">Rating</Label>\r\n                                <Control.select model=\".rating\" name=\"rating\" className=\"form-control\">\r\n                                        <option>1</option>\r\n                                        <option>2</option>\r\n                                        <option>3</option>\r\n                                        <option>4</option>\r\n                                        <option>5</option>\r\n                                </Control.select>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"name\">Your Name</Label>\r\n                                <Control.text model=\".author\" id=\"author\" name=\"author\"\r\n                                    placeholder=\"Your Name\"\r\n                                    className=\"form-control\"\r\n                                    validators={{\r\n                                        minLength: minLength(3),\r\n                                        maxLength: maxLength(15)\r\n                                    }}/>\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".author\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            minLength: 'Must be greater than 2 characters ',\r\n                                            maxLength: 'Must be 15 characters or less '\r\n                                        }} />\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"comment\">Comment</Label>\r\n                                <Control.textarea model=\".comment\" id=\"comment\" name=\"comment\" \r\n                                    rows=\"6\" className=\"form-control\"/>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Button type=\"submit\" color=\"primary\">\r\n                                    Submit\r\n                                </Button>\r\n                            </Row>\r\n                        </LocalForm>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n}\r\n\r\nfunction DishDetail(props) {\r\n    // Remember to pass the parameter between {} as this is used as a component\r\n    // <RenderAllComments comments={props.comments} />\r\n    function RenderAllComments({comments, postComment, dishId}) {\r\n        \r\n        function getDateString(date) {\r\n            return date.toLocaleDateString(\"en-US\", getDateOptions());\r\n        }\r\n        \r\n        function getDateOptions() {\r\n            return {\r\n                year: 'numeric',\r\n                month: 'short', \r\n                day: '2-digit'\r\n            };\r\n        }\r\n        \r\n        function RenderOneComment(comment) {\r\n            return (\r\n                <Fade in>\r\n                    <ListGroupItem id={comment.id} className=\"comments-list\">\r\n                        <p>{comment.comment}</p>\r\n                        <p>-- {comment.author}, {getDateString(new Date(comment.date))}</p>\r\n                    </ListGroupItem>\r\n                </Fade>\r\n            );\r\n        }\r\n        \r\n        if (comments == null) {\r\n            return (<div></div>);\r\n        }\r\n        \r\n        const theComments = comments.map((theComment) => {\r\n            return(RenderOneComment(theComment));\r\n        });\r\n        \r\n        return (\r\n            <div className=\"col-12 col-md-5 m-1\">\r\n                <h4>Comments</h4>\r\n                <div>\r\n                    <ListGroup>\r\n                        <Stagger in>\r\n                            {theComments}\r\n                        </Stagger>\r\n                    </ListGroup>\r\n                    <CommentFormComponent dishId={dishId} postComment={postComment}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n    function RenderDish({dish}) {\r\n        return (\r\n            <div className=\"col-12 col-md-5 m-1\">\r\n                <FadeTransform in transformProps = {{exitTransform: 'scale(0.5) translateY(-50%)'}}>\r\n                    <Card>\r\n                        <CardImg width=\"100%\" src={baseURL + dish.image} alt={dish.name}/>\r\n                        <CardBody>\r\n                            <CardTitle>{dish.name}</CardTitle>\r\n                            <CardText>{dish.description}</CardText>\r\n                        </CardBody>\r\n                    </Card>\r\n                </FadeTransform>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if(props.isLoading) {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Loading />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    else if(props.errMess) {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <h4>{props.errMess}</h4>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    else if(props.dish != null) {\r\n        return (\r\n            <div className=\"container dish-detail\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem><Link to='/menu'>Menu</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>{props.dish.name}</h3>\r\n                        <hr />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <RenderDish dish={props.dish} />\r\n                    <RenderAllComments\r\n                        comments={props.comments} \r\n                        postComment={props.postComment}\r\n                        dishId={props.dish.id} >\r\n                    </RenderAllComments>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    return(<div></div>); //Nothing will be rendered if selectedDish == null\r\n}\r\n\r\nexport default DishDetail;","export const ADD_COMMENT = 'ADD_COMMENT';\r\n\r\nexport const DISHES_LOADING = 'DISHES_LOADING'; // dishes loading from the server\r\nexport const DISHES_FAILED = 'DISHES_FAILED';   // dishes failed to be fetched from the server\r\nexport const ADD_DISHES = 'ADD_DISHES';         // Add dishes to the store\r\n\r\nexport const PROMOS_LOADING = 'PROMOS_LOADING';\r\nexport const PROMOS_FAILED = 'PROMOS_FAILED';\r\nexport const ADD_PROMOS = 'ADD_PROMOS';\r\n\r\n// No comments loading because by the time we go to DishDetail component, the Comments are already fetched\r\nexport const COMMENTS_FAILED = 'COMMENTS_FAILED';\r\nexport const ADD_COMMENTS = 'ADD_COMMENTS';\r\n\r\nexport const LEADERS_LOADING = 'LEADERS_LOADING';\r\nexport const LEADERS_FAILED = 'LEADERS_FAILED';\r\nexport const ADD_LEADERS = 'ADD_LEADERS';","import * as ActionTypes from './ActionTypes';\r\nimport { baseURL } from '../shared/baseURL';\r\n\r\n// The Action must be a plain JS Object. With the type and the payload\r\nexport const addComment = (comment) => ({\r\n    type: ActionTypes.ADD_COMMENT,\r\n    payload: comment\r\n});\r\n\r\nexport const postComment = (dishId, rating, author, comment) => (dispatch) => {\r\n    const newComment = {\r\n        dishId: dishId,\r\n        rating: rating,\r\n        author: author,\r\n        comment: comment\r\n    }\r\n    newComment.date = new Date().toISOString();\r\n\r\n    return fetch(baseURL + 'comments', {\r\n            method: 'POST',\r\n            body: JSON.stringify(newComment),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            credentials: 'same-origin'\r\n        })\r\n        .then(response => {\r\n            if(response.ok) {\r\n                return response;\r\n            }\r\n            else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        }, \r\n        error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n        })\r\n        .then(response => response.json()) // Convert return to json\r\n        .then(response => dispatch(addComment(response))) // You update the store here !!\r\n        .catch(error => { \r\n            console.log('Post comment', error.message);\r\n            alert('Your comment could not be posted\\nError: ' + error.message);\r\n        })\r\n}\r\n\r\n// This is a thunk, this returns a function\r\nexport const fetchDishes = () => (dispatch) => {\r\n    dispatch(dishesLoading(true));\r\n    return fetch(baseURL + 'dishes')\r\n        .then(response => {\r\n            if(response.ok) {\r\n                return response;\r\n            }\r\n            else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        }, \r\n        error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n        }) // last one is an error handler in case the server even does not respond\r\n        .then(response => response.json()) // Convert return to json\r\n        .then(dishes => dispatch(addDishes(dishes))) // Once response.json() is ok, dispatch the addDishes(dishes)\r\n        .catch(error => dispatch(dishesFailed(error.message)));\r\n}\r\n\r\n// This is an action. An action that does not have a payload. Only informs that the dishes are loading\r\nexport const dishesLoading = () => ({\r\n    type: ActionTypes.DISHES_LOADING\r\n});\r\n\r\n// This is another action\r\nexport const dishesFailed = (errmess) => ({\r\n    type: ActionTypes.DISHES_FAILED,\r\n    payload: errmess\r\n});\r\n\r\n// Another action\r\nexport const addDishes = (dishes) => ({\r\n    type: ActionTypes.ADD_DISHES,\r\n    payload: dishes \r\n});\r\n\r\n// This is a thunk, this returns a function\r\n// Comments are not loading\r\nexport const fetchComments = () => (dispatch) => {\r\n    return fetch(baseURL + 'comments')\r\n        .then(response => {\r\n            if(response.ok) {\r\n                return response;\r\n            }\r\n            else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        }, \r\n        error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n        })\r\n        .then(response => response.json()) // Convert return to json\r\n        .then(comments => dispatch(addComments(comments))) // Once response.json() is ok, dispatch\r\n        .catch(error => dispatch(commentsFailed(error.message)));\r\n}\r\n\r\n// Another action\r\nexport const addComments = (comments) => ({\r\n    type: ActionTypes.ADD_COMMENTS,\r\n    payload: comments \r\n});\r\n\r\n// This is another action\r\nexport const commentsFailed = (errmess) => ({\r\n    type: ActionTypes.COMMENTS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\n// This is a thunk, this returns a function\r\nexport const fetchPromos = () => (dispatch) => {\r\n    dispatch(promosLoading(true));\r\n    return fetch(baseURL + 'promotions')\r\n        .then(response => {\r\n            if(response.ok) {\r\n                return response;\r\n            }\r\n            else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        }, \r\n        error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n        })\r\n        .then(response => response.json()) // Convert return to json\r\n        .then(promos => dispatch(addPromos(promos))) // Once response.json() is ok, dispatch\r\n        .catch(error => dispatch(promosFailed(error.message)));\r\n}\r\n\r\n// This is an action. An action that does not have a payload. Only informs that the dishes are loading\r\nexport const promosLoading = () => ({\r\n    type: ActionTypes.PROMOS_LOADING\r\n});\r\n\r\n// This is another action\r\nexport const promosFailed = (errmess) => ({\r\n    type: ActionTypes.PROMOS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\n// Another action\r\nexport const addPromos = (promos) => ({\r\n    type: ActionTypes.ADD_PROMOS,\r\n    payload: promos\r\n});\r\n\r\n// This is a thunk, this returns a function\r\nexport const fetchLeaders = () => (dispatch) => {\r\n    dispatch(leadersLoading(true));\r\n    return fetch(baseURL + 'leaders')\r\n        .then(response => {\r\n            if(response.ok) {\r\n                return response;\r\n            }\r\n            else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        }, \r\n        error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n        })\r\n        .then(response => response.json()) // Convert return to json\r\n        .then(leaders => dispatch(addLeaders(leaders))) // Once response.json() is ok, dispatch\r\n        .catch(error => dispatch(leadersFailed(error.message)));\r\n}\r\n\r\n// This is an action. An action that does not have a payload. Only informs that the leaders are loading\r\nexport const leadersLoading = () => ({\r\n    type: ActionTypes.LEADERS_LOADING\r\n});\r\n\r\n// This is another action\r\nexport const leadersFailed = (errmess) => ({\r\n    type: ActionTypes.LEADERS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\n// Another action\r\nexport const addLeaders = (promos) => ({\r\n    type: ActionTypes.ADD_LEADERS,\r\n    payload: promos\r\n});\r\n\r\nexport const postFeedback = (firstname, lastname, telnum, email, agree, contactType, message) => (dispatch) => {\r\n    const newFeedback = {\r\n        firstname: firstname,\r\n        lastname: lastname,\r\n        telnum: telnum,\r\n        email: email,\r\n        agree: agree,\r\n        contactType: contactType,\r\n        message: message\r\n    }\r\n    newFeedback.date = new Date().toISOString();\r\n\r\n    return fetch(baseURL + 'feedback', {\r\n            method: 'POST',\r\n            body: JSON.stringify(newFeedback),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            credentials: 'same-origin'\r\n        })\r\n        .then(response => {\r\n            if(response.ok) {\r\n                return response;\r\n            }\r\n            else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        }, \r\n        error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n        })\r\n        .then(response => response.json())\r\n        .then(feedback => {\r\n            const message = \"Feedback has been posted: \" + JSON.stringify(feedback);\r\n            alert(message);\r\n        })\r\n        .catch(error => { \r\n            console.log('Post feedback', error.message);\r\n            alert('Your feedback could not be posted\\nError: ' + error.message);\r\n        })\r\n}","import { Component } from 'react';\r\nimport Home from './Home';\r\nimport Header from './Header';\r\nimport Footer from './Footer';\r\nimport Menu from './Menu';\r\nimport About from './AboutComponent';\r\nimport ContactRedux from './ContactCompRedux';\r\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\r\nimport DishDetail from './DishDetail';\r\nimport { connect } from 'react-redux';\r\nimport { fetchDishes, fetchComments, fetchPromos, postComment, fetchLeaders, postFeedback } from '../redux/ActionCreators';\r\nimport { actions } from 'react-redux-form';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\n\r\n// This method allows to get these variables into this Component\r\nconst mapStateToProps = state => {\r\n    return {\r\n        dishes: state.dishes,\r\n        comments: state.comments,\r\n        promotions: state.promotions,\r\n        leaders: state.leaders\r\n    }\r\n}\r\n\r\n// This method allows to dispatch actions (plain JS objects) to modify the state\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    postComment: (dishId, rating, author, comment) => dispatch(postComment(dishId, rating, author, comment)),\r\n    fetchDishes: () => { dispatch(fetchDishes()) },\r\n    resetFeedbackForm: () => { dispatch(actions.reset('feedback')) }, // Have to update the form to label it as \"feedback\"\r\n    fetchPromos: () => { dispatch(fetchPromos()) },\r\n    fetchComments: () => { dispatch(fetchComments()) },\r\n    fetchLeaders: () => { dispatch(fetchLeaders()) },\r\n    postFeedback: (firstname, lastname, telnum, email, agree, contactType, message) => dispatch(postFeedback(firstname, lastname, telnum, email, agree, contactType, message))\r\n});\r\n\r\nclass Main extends Component {\r\n    // Component lifecycle\r\n    // 1. Constructor\r\n    // 2. Render\r\n    // 3. componentDidMount\r\n    // 4. and above: Renders depending on events (clic, etc)\r\n    \r\n    // eslint-disable-next-line\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchDishes();\r\n        this.props.fetchComments();\r\n        this.props.fetchPromos();\r\n        this.props.fetchLeaders();\r\n    }\r\n\r\n    render() {\r\n        const getFeatured = (list) => {\r\n            return list.filter((element) => element.featured)[0]; // First element that has \"featured\" equal to True\r\n        }\r\n        \r\n        // Anything that does not match or menu will be redirect to /home (redirect)\r\n        const HomePage = () => {\r\n            return (\r\n                <Home \r\n                    dish={getFeatured(this.props.dishes.dishes)} // State has changed its shape. See dishes.js reducer for details\r\n                    dishesLoading={this.props.dishes.isLoading}\r\n                    dishesErrMess={this.props.dishes.errmess}\r\n                    leader={getFeatured(this.props.leaders.leaders)}\r\n                    leadersLoading={this.props.leaders.isLoading}\r\n                    leadersErrMess={this.props.leaders.errmess}\r\n                    promotion={getFeatured(this.props.promotions.promotions)}\r\n                    promotionsLoading={this.props.promotions.isLoading}\r\n                    promotionsErrMess={this.props.promotions.errmess}\r\n                />\r\n            );\r\n        }\r\n        \r\n        // Remember that React routers also passes location and history, but we'll only use match here\r\n        // parseInt(match.params.dishId,10) ---> Convert string to a based-10 integer\r\n        const DishWithId = ({match}) => {\r\n            return (\r\n                <DishDetail \r\n                    dish={this.props.dishes.dishes.filter((dish) => dish.id === parseInt(match.params.dishId,10))[0]}\r\n                    isLoading={this.props.dishes.isLoading}\r\n                    errMess={this.props.dishes.errmess}\r\n                    comments={this.props.comments.comments.filter((comment) => comment.dishId === parseInt(match.params.dishId,10))}\r\n                    postComment={this.props.postComment}\r\n                    commentsErrMess={this.props.comments.errmess}\r\n                >\r\n                </DishDetail>\r\n            );\r\n        }\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <TransitionGroup>\r\n                    <CSSTransition key={this.props.location.key} classNames=\"page\" timeout={300}>\r\n                        <Switch>\r\n                            <Route path=\"/home\" component={HomePage}></Route>\r\n                            <Route exact path=\"/menu\" component={() => <Menu dishes={this.props.dishes}/>}></Route>\r\n                            <Route path=\"/menu/:dishId\" component={DishWithId}></Route>\r\n                            <Route exact path=\"/contactus\" component={\r\n                                () => <ContactRedux resetFeedbackForm={this.props.resetFeedbackForm} postFeedback={this.props.postFeedback}/>\r\n                            }></Route>\r\n                            <Route exact path=\"/aboutus\" component={() => <About leadersInfo={this.props.leaders}/>}></Route>\r\n                            <Redirect to=\"/home\" ></Redirect>\r\n                        </Switch>\r\n                    </CSSTransition>\r\n                </TransitionGroup>\r\n                <Footer />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));","import * as ActionTypes from './ActionTypes';\r\n\r\nexport const Dishes = (state = {\r\n        isLoading: true,\r\n        errmess: null,\r\n        dishes: []\r\n    }, action) => {\r\n    switch(action.type) {\r\n        case ActionTypes.ADD_DISHES:\r\n            return {\r\n                ...state, \r\n                isLoading: false, errmess: null, dishes: action.payload\r\n            };\r\n        case ActionTypes.DISHES_LOADING:\r\n            return {\r\n                ...state, \r\n                isLoading: true, errmess: null, dishes: []\r\n            }; // Take the state as it is, create a copy, apply the modifications stated after the first comma, and return it\r\n        case ActionTypes.DISHES_FAILED:\r\n            return {\r\n                ...state, \r\n                isLoading: false, errmess: action.payload\r\n            }; // Remember the error message was being saved on the action payload\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as ActionTypes from './ActionTypes';\r\n\r\nexport const Comments = (state = {\r\n        errmess: null,\r\n        comments: []\r\n    }, action) => {\r\n    switch(action.type) {\r\n        case ActionTypes.ADD_COMMENT:\r\n            var comment = action.payload;\r\n             return {...state, comments: state.comments.concat(comment)} // Concat method WILL CREATE A NEW OBJECT. It is an immutable operation. This is important...\r\n        case ActionTypes.ADD_COMMENTS:\r\n            return {...state, errmess: null, comments: action.payload}\r\n        case ActionTypes.COMMENTS_FAILED:\r\n            return {...state, errmess: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as ActionTypes from './ActionTypes';\r\n\r\nexport const Promotions = (state = {\r\n        isLoading: true,\r\n        errmess: null,\r\n        promotions: []\r\n    }, action) => {\r\n    switch(action.type) {\r\n        case ActionTypes.ADD_PROMOS:\r\n            return {\r\n                ...state, \r\n                isLoading: false, errmess: null, promotions: action.payload\r\n            };\r\n        case ActionTypes.PROMOS_LOADING:\r\n            return {\r\n                ...state, \r\n                isLoading: true, errmess: null, promotions: []\r\n            }; // Take the state as it is, create a copy, apply the modifications stated after the first comma, and return it\r\n        case ActionTypes.PROMOS_FAILED:\r\n            return {\r\n                ...state, \r\n                isLoading: false, errmess: action.payload\r\n            }; // Remember the error message was being saved on the action payload\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as ActionTypes from './ActionTypes';\r\n\r\nexport const Leaders = (state = {\r\n        isLoading: true,\r\n        errmess: null,\r\n        leaders: []\r\n    }, action) => {\r\n    switch(action.type) {\r\n        case ActionTypes.ADD_LEADERS:\r\n            return {\r\n                ...state, \r\n                isLoading: false, errmess: null, leaders: action.payload\r\n            };\r\n        case ActionTypes.LEADERS_LOADING:\r\n            return {\r\n                ...state, \r\n                isLoading: true, errmess: null, promotions: []\r\n            };\r\n        case ActionTypes.LEADERS_FAILED:\r\n            return {\r\n                ...state, \r\n                isLoading: false, errmess: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","export const InitialFeedback = {\r\n    firstname: '',\r\n    lastname: '',\r\n    telnum: '',\r\n    email: '',\r\n    agree: false,\r\n    contactType: 'Tel.',\r\n    message: ''\r\n}","import './App.css';\nimport React from 'react';\nimport Main from './components/Main'\nimport { BrowserRouter } from 'react-router-dom'\nimport { Provider } from 'react-redux';\nimport { ConfigureStore } from './redux/configureStore';\n\nconst store = ConfigureStore();\n\nfunction App() {  \n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        <div>\n          <Main/>\n        </div>\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;","import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport { createForms } from 'react-redux-form';\r\nimport { Dishes } from './dishes';\r\nimport { Comments } from './comments';\r\nimport { Promotions } from './promotions';\r\nimport { Leaders } from './leaders';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nimport { InitialFeedback } from './forms';\r\n\r\nexport const ConfigureStore = () => {\r\n    const store = createStore(\r\n        combineReducers({\r\n            dishes: Dishes,\r\n            comments: Comments,\r\n            leaders: Leaders,\r\n            promotions: Promotions,\r\n            ...createForms({\r\n                feedback: InitialFeedback\r\n            })\r\n        }),\r\n        applyMiddleware(thunk, logger)\r\n    );\r\n    return store;\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css';\nimport App from './App';\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap-social/bootstrap-social.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}